#pragma once

#include "MotionBoard.hpp"
#include "hal.h"
#define LOGGING_DRIVER SD2
#define SHELL_DRIVER LOGGING_DRIVER
#define MOTOR_PWM_DRIVER PWMD1  //right for now

#define LOGGING_TX_PIN PAL_LINE(GPIOA, 2U)
#define LOGGING_TX_PIN_MODE PAL_MODE_ALTERNATE(7)
#define LOGGING_RX_PIN PAL_LINE(GPIOA, 3U)
#define LOGGING_RX_PIN_MODE PAL_MODE_ALTERNATE(7)

#define CAN_DRIVER CAND1
#define CAN_TX_PIN      PAL_LINE(GPIOA, 11U)
#define CAN_TX_PIN_MODE PAL_MODE_ALTERNATE(9)
#define CAN_RX_PIN      PAL_LINE(GPIOA, 12U)
#define CAN_RX_PIN_MODE PAL_MODE_ALTERNATE(9)

CANConfig const canConfig = {
    .NBTP  = 0x2070C01,
    .DBTP  = 0,
    .CCCR  = 0,
    .TEST  = 0,
    .RXGFC = 0,
};

#define PWM_COUNTING_FREQUENCY 32000000
#define PWM_OUTPUT_FREQUENCY 20000

__extension__ const PWMChannelConfig channelConf{
    .mode     = PWM_OUTPUT_ACTIVE_HIGH,
    .callback = NULL,
};

__extension__ const PWMConfig pwmMotorConfig{
    .frequency = PWM_COUNTING_FREQUENCY,
    .period    = PWM_COUNTING_FREQUENCY / PWM_OUTPUT_FREQUENCY,
    .callback  = NULL,
    .channels  = {
        channelConf,
        {PWM_OUTPUT_DISABLED, NULL},
        channelConf,
        {PWM_OUTPUT_DISABLED, NULL},
    },
    .cr2  = 0,
    .bdtr = 0,
    .dier = 0,
};


#define ENCODER_LEFT_CHAN1_LINE PAL_LINE(GPIOB, 4U)
#define ENCODER_LEFT_CHAN2_LINE PAL_LINE(GPIOA, 7U)
#define ENCODER_RIGHT_CHAN1_LINE PAL_LINE(GPIOA, 0U)
#define ENCODER_RIGHT_CHAN2_LINE PAL_LINE(GPIOA, 1U)

#define ENCODER_LEFT_CHAN1_PIN_MODE PAL_MODE_ALTERNATE(2)
#define ENCODER_LEFT_CHAN2_PIN_MODE PAL_MODE_ALTERNATE(2)
#define ENCODER_RIGHT_CHAN1_PIN_MODE PAL_MODE_ALTERNATE(1)
#define ENCODER_RIGHT_CHAN2_PIN_MODE PAL_MODE_ALTERNATE(1)

// Timers

#define MOTOR_CONTROL_LOOP_TIMER GPTD7

// GPIO
#define LED_LINE PAL_LINE(GPIOB, 8U)
#define LED_LINE_MODE PAL_MODE_OUTPUT_PUSHPULL

#define EMGCY_STOP_PIN PAL_LINE(GPIOB, 5U)
#define EMGCY_STOP_PIN_MODE PAL_MODE_INPUT_PULLUP

#define BRAKE_PIN PAL_LINE(GPIOF, 1U)
#define BRAKE_PIN_MODE PAL_MODE_OUTPUT_PUSHPULL
